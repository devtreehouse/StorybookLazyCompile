"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.freeze");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = renderMain;

require("regenerator-runtime/runtime");

var _global = require("global");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _commonTags = require("common-tags");

var _element_check = _interopRequireDefault(require("./element_check"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n         Seems like you are not returning a correct React element from the story.\n         Could you double check that?\n       "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        Did you forget to return the React element from the story?\n        Use \"() => (<MyComp/>)\" or \"() => { return <MyComp/>; }\" when defining the story.\n      "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var rootEl = _global.document ? _global.document.getElementById('root') : null;

var render = function render(node, el) {
  return new Promise(function (resolve) {
    _reactDom["default"].render(process.env.STORYBOOK_EXAMPLE_APP ? _react["default"].createElement(_react["default"].StrictMode, null, node) : node, el, resolve);
  });
};

function renderMain(_x) {
  return _renderMain.apply(this, arguments);
}

function _renderMain() {
  _renderMain = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var StoryFn, selectedKind, selectedStory, showMain, showError, forceRender, element;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            StoryFn = _ref.storyFn, selectedKind = _ref.selectedKind, selectedStory = _ref.selectedStory, showMain = _ref.showMain, showError = _ref.showError, forceRender = _ref.forceRender;
            element = _react["default"].createElement(StoryFn, null);

            if (element) {
              _context.next = 5;
              break;
            }

            showError({
              title: "Expecting a React element from the story: \"".concat(selectedStory, "\" of \"").concat(selectedKind, "\"."),
              description: (0, _commonTags.stripIndents)(_templateObject())
            });
            return _context.abrupt("return");

          case 5:
            if ((0, _element_check["default"])(element)) {
              _context.next = 8;
              break;
            }

            showError({
              title: "Expecting a valid React element from the story: \"".concat(selectedStory, "\" of \"").concat(selectedKind, "\"."),
              description: (0, _commonTags.stripIndents)(_templateObject2())
            });
            return _context.abrupt("return");

          case 8:
            // We need to unmount the existing set of components in the DOM node.
            // Otherwise, React may not recreate instances for every story run.
            // This could leads to issues like below:
            // https://github.com/storybookjs/react-storybook/issues/81
            // But forceRender means that it's the same story, so we want too keep the state in that case.
            if (!forceRender) {
              _reactDom["default"].unmountComponentAtNode(rootEl);
            }

            _context.next = 11;
            return render(element, rootEl);

          case 11:
            showMain();

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _renderMain.apply(this, arguments);
}